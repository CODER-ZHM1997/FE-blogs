本文档主要编写一些编程、职业规划

## 编程

#### 怎样培养对编程的热爱？

- 选择一个自己感兴趣的语言
- 去学习优秀项目
- 去解决问题
- 不断尝试新的领域
- 找志同道合的人
- 去创建一些东西



#### 学习编程有哪些技巧？

- 实践：找一个好的demo很重要
- 学会调试
  - 这能够帮你快速找到问题，和阅读别人的代码
- 阅读源代码
  - 更好的了解他们的思路
- 参与社区
  - 可以得到指导还有讨论
- 学会找学习方法，引导自己的思维，意识到自己的思维习惯
- 学习的时候，**首先要明确目标，最好说出口，吐槽学**，这样你才能加快速度，把东西都关联起来
  - 还写一下总体的步骤，这样你才能把把控整体节奏，不要被拖死，视野要放高一点
  - 看清总体的有哪几个对象，围绕对象，流程去学习，抓住主要的几个对象、流程即可
- 比如：你说你学东西是以“记”为主，还是以“查”为主？肯定是查，记你是记不住几个的
  - 你所需要记住的是关键的概念，整体的流程，剩下的都是去官网翻或者是github里查询，或者是代码会有提示，要用的时候，翻一下文档即可，用过几次你就熟悉了
- 带着问题去学习，时刻准备这样一个问题
  - 你说你会react，那说说你对react的理解，他能干什么，怎样做，还有他的优缺点，
- 模仿大佬的思考方式或者是叫解决问题的思路
  - 

- 模仿大佬的代码编写风格
  - 



#### 学习编程有哪些坑？





#### 怎样打好基础？

找一个份好的学习项目去学

- 

主题

- html+css+js
- 框架和工具
- 网络
- 性能
- 项目实战



#### 怎样去执行进阶？

可以从一下主题进行切入

- 工程化
- 性能优化
- ts
- 源码
- 设计模式
- 数据结构
- 了解开发工具、和调试技巧



#### 综合能力

：技术+业务

- 对常见的需求能说出解决方案
- 对前沿技术有自己的见解
- 做了类型足够多的项目
- 编写代码能做到一下几点：安全性、适配、兼容、可靠性、可维护、可扩展

日常练习

- 布局，不然关键时刻会卡死你



#### 如何减少代码调试次数？

- 好的编码习惯
- 多写注释
- 简化代码
- 使用debugg工具
- 做好单元测试
- 使用日志



#### 常见的坑

- 兼容性问题：浏览器不支持
- 单词大小、顺序拼写错误
- 缓存问题
  - 有浏览器缓存
  - 还有页面数据缓存，没有清除上一流程遗漏的数据
    - 可以在开头或者是结束的时候做清除
- 异步问题
- 适配问题
- 个人理解有问题
  - 对api理解错误
- 框架问题
  - 框架本身的坑，不支持，或者是有bug
- 性能问题
- js
  - 闭包：不正确的使用，导致内存泄漏
- 



#### 你有职业规划吗？

